// Цветовые коды
const ANSI_COLORS = {
  // Код для красного цвета (обычно используется для ошибок сервера)
  red: '\x1b[31m',
  // Код для жёлтого цвета (обычно используется для предупреждений или ошибок клиента)
  yellow: '\x1b[33m',
  // Код для голубого цвета (используется для перенаправлений)
  cyan: '\x1b[36m',
  // Код для зелёного цвета (используется для успешных операций)
  green: '\x1b[32m',
  // Код для сброса цвета (возвращает цвет консоли к исходному состоянию)
  reset: '\x1b[0m',
};

// Функция, которая определяет цвет в зависимости от переданного HTTP-статуса
const getStatusColor = (status) => {
  // Если статус показывает ошибку сервера (500 и выше), возвращаем красный цвет
  if (status >= 500) return ANSI_COLORS.red;
  // Если статус указывает на клиентскую ошибку (400-499), возвращаем жёлтый цвет
  if (status >= 400) return ANSI_COLORS.yellow;
  // Если статус показывает перенаправление (300-399), возвращаем голубой цвет
  if (status >= 300) return ANSI_COLORS.cyan;
  // Если статус говорит об успешной операции (200-299), возвращаем зелёный цвет
  if (status >= 200) return ANSI_COLORS.green;
  // Все остальные статусы возвращают исходный цвет по умолчанию
  return ANSI_COLORS.reset;
};

// Функция, принимающая HTTP-статус и возвращающая строку,
// окрашенную в соответствующий цвет
const colorizeStatus = (status) => {
  // Получаем цвет, соответствующий статусу, с помощью функции getStatusColor
  const color = getStatusColor(status);
  // Возвращаем строку, где статус "окрашен" в нужный цвет
  // Также добавляем ANSI reset код в конце, чтобы после текста вернуть стандартное оформление консоли
  return `${color}${status}${ANSI_COLORS.reset}`;
};

// Экспортируем наши константы и функции для использования в других модулях
module.exports = {
  ANSI_COLORS, // Экспортируем объект с цветами для использования напрямую, если потребуется
  getStatusColor, // Экспортируем функцию для получения цвета по HTTP-статусу
  colorizeStatus, // Экспортируем функцию для окрашивания статуса в строку
};
