const WishlistService = require('../services/Wishlist.service');
const UserService = require('../services/User.service');
const isValidId = require('../utils/validation/isValidId');
const WishlistValidator = require('../utils/validation/Wishlist.validator');
const formatResponse = require('../utils/formatResponse');

class WishlistController {
  //-- Метод для получения всех вишлистов
  static async getAll(req, res) {
    try {
      //? За запросы в БД отвечает сервис
      // Получаем список всех вишлистов с использованием сервиса
      const wishlists = await WishlistService.getAll();

      //! Проверка на длину списка (обработка негативного кейса)
      // Если вишлисты не найдены (список пуст), возвращаем сообщение об этом
      if (wishlists.length === 0) {
        // FIX: Ранее использовался статус 204 (No Content), который не позволяет отправлять контент в ответе.
        // заменяем на статус 200, чтобы клиент получил информацию
        return res
          .status(200) // HTTP статус-код 200 (OK), так как запрос обработан успешно.
          .json(formatResponse(200, 'Не найдено вишлистов.', [])); // Форматируем ответ: пустой массив вишлистов
      }

      //* Успешный кейс
      // Если вишлисты найдены, возвращаем их с сообщением об успешном выполнении запроса
      res
        .status(200) // HTTP статус-код 200 (OK), который указывает успешное выполнение запроса
        .json(
          formatResponse(200, 'Успешное получение списка вишлистов.', wishlists)
        ); // Передаем массив найденных вишлистов
    } catch ({ message }) {
      // Обработка исключений: если происходит ошибка (например, сбой базы данных), логируем сообщение об ошибке
      console.error(message);
      // Возвращаем клиенту статус 500 (Internal Server Error) с описанием ошибки
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }

  //-- Метод для получения вишлиста по его ID
  static async getById(req, res) {
    // Извлекаем ID вишлиста из параметров запроса
    const { id } = req.params;

    //! Проверка на валидность ID
    // Используем утилиту isValidId для проверки корректности переданного ID. Если он невалиден, возвращаем статус 400 (Bad Request)
    if (!isValidId(id)) {
      return res
        .status(400) // HTTP статус-код 400 указывает на ошибку клиента (например, неправильный формат ID)
        .json(
          formatResponse(
            400, // HTTP статус-код
            'Невалидный ID вишлиста.', // Сообщение об ошибке
            null, // Данные ответа (отсутствуют из-за ошибки)
            'Невалидный ID вишлиста.' // Техническое описание ошибки
          )
        );
    }

    try {
      //? За запросы в БД отвечает сервис
      // Ищем вишлист в базе данных, преобразуя переданный ID в число (если ID был передан строкой)
      const wishlist = await WishlistService.getById(+id);

      //! Проверка на существование вишлиста
      // Если вишлист с данным ID не найден, возвращаем статус 404 (Not Found)
      if (!wishlist) {
        return res
          .status(404) // HTTP статус-код 404 указывает, что ресурс не найден
          .json(
            formatResponse(
              404, // HTTP статус-код
              `Вишлист не найден.`, // Сообщение для пользователя
              null, // Данные ответа (отсутствуют)
              `Вишлист не найден.` // Техническая информация для разработчиков
            )
          );
      }

      //* Успешный кейс
      // Если вишлист найден, возвращаем его с сообщением об успешном выполнении запроса
      res
        .status(200) // HTTP статус-код 200 (ОК), что означает успешное выполнение запроса
        .json(formatResponse(200, 'Вишлист успешно получен.', wishlist)); // Форматируем ответ с данными вишлиста
    } catch ({ message }) {
      // Обработка исключений: если возникает ошибка (например, сбой базы данных), логируем сообщение об ошибке.
      console.error(message);
      // Возвращаем клиенту статус 500 (Internal Server Error) с описанием ошибки
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }

  //-- Метод для создания вишлиста
  static async create(req, res) {
    // Извлекаем заголовок (название) вишлиста из тела запроса
    const { title } = req.body;

    //* Получаем текущего пользователя
    // Пользователь, инициировавший запрос, извлекается из `res.locals`.
    // Это значение добавляется после прохождения промежуточного middleware-аутентификации.
    const { user } = res.locals;

    //! Проверяем наличие необходимых данных
    // Используем валидатор `WishlistValidator` для проверки, корректно ли указано название вишлиста.
    // `validate()` возвращает объект `{ isValid: boolean, error: string }`, указывающий, прошло ли валидацию значение.
    const { isValid, error } = WishlistValidator.validate(title);
    if (!isValid) {
      // Если validation не проходит, возвращаем ошибку 400 (Bad Request) с соответствующим сообщением.
      return res.status(400).json(formatResponse(400, error, null, error));
    }

    //! Проверка на наличие прикрепленного файла
    // Проверяем, был ли в запросе загружен файл. Если файл отсутствует, пользователь получает ошибку.
    if (!req.file) {
      return res
        .status(400) // HTTP-код 400 означает ошибку клиента
        .json(
          formatResponse(400, 'Картинка обязательна при создании вишлиста.') // Сообщаем, что для создания вишлиста требуется загрузить картинку
        );
    }

    try {
      // Если файл присутствует, формируем путь до сохраненного изображения (например, в директории `wishlistsBackgrounds`).
      const backgroundPictureSrc = `wishlistsBackgrounds/${req.file.path}`;

      //? Используем сервис для выполнения операций с базой данных.
      // Создаем новый вишлист, передавая его параметры:
      // - `title` — название вишлиста
      // - `ownerId` — автор идентифицируется по ID текущего пользователя
      // - `backgroundPictureSrc` — путь к изображению для вишлиста
      const newWishlist = await WishlistService.create({
        title,
        ownerId: user.id,
        backgroundPictureSrc,
      });

      //! Проверяем успешность создания вишлиста
      // Иногда операция может не завершиться успешно по причинам на уровне базы данных.
      // Если сервис возвращает пустое значение (например, `null`), это указывает на сбой.
      if (!newWishlist) {
        return res
          .status(400) // HTTP-код 400 сигнализирует об ошибке в обработке данных
          .json(
            formatResponse(
              400,
              `Не удалось создать вишлист.`,
              null,
              `Не удалось создать вишлист.`
            )
          );
      }

      //* Если создание прошло успешно, возвращаем успешный ответ
      // HTTP-код 201 (Created) используется для подтверждения успешного создания ресурса
      res
        .status(201)
        .json(formatResponse(201, 'Вишлист успешно создан.', newWishlist)); // Возвращаем данные созданного вишлиста
    } catch ({ message }) {
      // Логируем ошибку на сервере для последующей диагностики
      console.error(message);
      // Если произошла внутренняя ошибка, возвращаем клиенту статус 500
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }

  //-- Метод для обновления данных конкретного вишлиста
  static async update(req, res) {
    // Получаем идентификатор (ID) вишлиста из параметров URL
    const { id } = req.params;
    // Получаем новое название вишлиста из тела запроса
    const { title } = req.body;
    // Извлекаем текущего пользователя из `res.locals` (устанавливается при аутентификации)
    const { user } = res.locals;

    //! Проверка переданного ID на валидность
    // Используем утилиту `isValidId`, чтобы убедиться, что переданный ID является корректным числом.
    if (!isValidId(id)) {
      return res
        .status(400) // Возвращаем ошибку 400 (Bad Request), если ID невалидный
        .json(
          formatResponse(
            400,
            'Передан невалидный ID.', // Сообщение для пользователя
            null,
            'Передан невалидный ID.' // Дополнительная техническая информация
          )
        );
    }

    //! Проверка переданных данных
    // Используем валидатор `WishlistValidator` для проверки валидности названия нового вишлиста.
    const { isValid, error } = WishlistValidator.validate(title);
    if (!isValid) {
      // Если данные невалидны, возвращаем ошибку и идентифицируем, что именно пошло не так.
      return res.status(400).json(formatResponse(400, error, null, error));
    }

    try {
      //* Получаем данные вишлиста, который требуется обновить
      const wishlistToUpdate = await WishlistService.getById(+id);

      //! Проверяем, существует ли вишлист с данным ID
      if (!wishlistToUpdate) {
        return res
          .status(404) // Возвращаем ошибку 404 (Not Found), если вишлист не найден
          .json(
            formatResponse(
              404,
              `Вишлист не найден.`, // Сообщение об отсутствии ресурса
              null,
              `Вишлист не найден.` // Подробная информация для разработчиков
            )
          );
      }

      //! Проверка прав доступа пользователя
      // Сравниваем ID текущего пользователя с ID владельца вишлиста.
      if (wishlistToUpdate.ownerId !== user.id) {
        return res
          .status(400) // Возвращаем ошибку 400, если пользователь не является владельцем
          .json(
            formatResponse(
              400,
              `У вас нет прав на изменение этого вишлиста.`, // Сообщение для пользователя
              null,
              `У вас нет прав на изменение этого вишлиста.` // Техническая информация
            )
          );
      }

      //! Обработка изменения фонового изображения (картинки)
      // Сохраняем текущий путь до картинки (если новая картинка не передана, он не изменится)
      let backgroundPictureSrc = wishlistToUpdate.backgroundPictureSrc;
      // Если пользователь отправляет новый файл, заменяем старое изображение
      if (req.file) {
        backgroundPictureSrc = `wishlistsBackgrounds/${req.file.path}`; // Формируем новый путь для файла
      }

      //? Запрос на обновление данных в базе через сервис
      // Передаем обновленные данные в метод `update` сервиса. Здесь происходит прямое сопоставление ID к числу (Number).
      const updatedWishlist = await WishlistService.update(+id, {
        title,
        backgroundPictureSrc,
      });

      //! Проверка результата обновления
      // Если по каким-то причинам обновить вишлист не удалось, возвращаем ошибку 400
      if (!updatedWishlist) {
        return res.status(400).json(
          formatResponse(
            400,
            `Не удалось обновить вишлист.`, // Сообщение пользователю
            null,
            `Не удалось обновить вишлист.` // Подробности для технической диагностики
          )
        );
      }

      //* Успешное выполнение обновления
      // Если обновление прошло успешно, возвращаем объект обновленного вишлиста клиенту
      res
        .status(200) // HTTP-код 200 указывает успешное выполнение операции
        .json(
          formatResponse(200, 'Вишлист успешно обновлен.', updatedWishlist) // Сообщение об успехе и данные
        );
    } catch ({ message }) {
      // Если внутри блока `try` произошла ошибка, логируем ее в консоль для разработчика
      console.error(message);
      // Возвращаем пользователю статус 500 (Internal Server Error) с описанием проблемы
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }

  //-- Асинхронный метод для удаления конкретного вишлиста из базы данных
  static async delete(req, res) {
    // Извлекаем идентификатор (ID) удаляемого вишлиста из параметров URL
    const { id } = req.params;
    // Извлекаем текущего пользователя из res.locals, который был установлен через middleware-аутентификацию
    const { user } = res.locals;

    //! Проверка валидности переданного ID
    // Сначала проверяем, является ли переданный ID корректным (например, числом). Это важно для предотвращения битых запросов.
    if (!isValidId(id)) {
      return res
        .status(400) // HTTP-код 400 (Bad Request) сигнализирует о невалидных данных от клиента
        .json(
          formatResponse(
            400,
            'Вишлист не найден.', // Сообщение для клиента об ошибке
            null,
            'Вишлист не найден.' // Техническая информация для диагностики
          )
        );
    }

    try {
      //* Получение данных вишлиста
      // Пытаемся найти вишлист по ID через сервис `WishlistService`
      const wishlistToDelete = await WishlistService.getById(+id);

      //! Проверяем, существует ли такой вишлист
      // Если вишлист с указанным ID не найден, отправляем клиенту ошибку 404 (Not Found)
      if (!wishlistToDelete) {
        return res.status(404).json(
          formatResponse(
            404,
            `Вишлист не найден.`, // Сообщение пользователю
            null,
            `Вишлист не найден.` // Технические детали
          )
        );
      }

      //! Проверка прав доступа пользователя
      // Сравниваем ID текущего пользователя (`user.id`) с ID владельца вишлиста (`wishlistToDelete.ownerId`)
      if (wishlistToDelete.ownerId !== user.id) {
        return res
          .status(400) // HTTP-код 400 (Bad Request) указывает на отсутствие прав доступа
          .json(
            formatResponse(
              400,
              `У вас нет прав на удаление этого вишлиста.`, // Сообщение об ошибке
              null,
              `У вас нет прав на удаление этого вишлиста.` // Логируется для разработчиков
            )
          );
      }

      //? Удаление вишлиста
      // Начинаем процесс удаления через сервис `WishlistService.delete`, передавая ID вишлиста.
      const deletedWishlist = await WishlistService.delete(+id);

      //! Проверяем успешность удаления
      // Если удаление не удалось (например, из-за ошибки базы данных), возвращаем ошибку.
      if (!deletedWishlist) {
        return res.status(400).json(
          formatResponse(
            400,
            `Не удалось удалить вишлист.`, // Сообщение для пользователя
            null,
            `Не удалось удалить вишлист.` // Дополнительная информация для диагностики
          )
        );
      }

      //* Успешное удаление
      // Если удаление прошло успешно, возвращаем успешный ответ клиенту.
      res
        .status(200) // HTTP-код 200 (OK) указывает, что ресурс успешно удален
        .json(
          formatResponse(200, `Вишлист успешно удалён.`, deletedWishlist) // Сообщаем клиенту об успешном выполнении операции
        );
    } catch ({ message }) {
      // Если в процессе выполнения возникла ошибка (например, проблема с сервисом или базой данных), мы ловим её здесь.
      console.error(message); // Ошибка логируется на сервере
      res
        .status(500) // HTTP-код 500 (Internal Server Error) указывает на внутреннюю ошибку сервера
        .json(
          formatResponse(500, 'Внутренняя ошибка сервера', null, message) // Сообщаем, что что-то пошло не так
        );
    }
  }

  //-- Метод для приглашения пользователя в конкретный вишлист
  static async inviteUserToWishlist(req, res) {
    // Извлекаем идентификатор вишлиста из параметров URL
    const { id } = req.params;
    // Получаем текущего пользователя из res.locals, информация о котором была добавлена после аутентификации
    const { user } = res.locals;
    // ID пользователя, которого мы хотим пригласить, берется из тела запроса
    const { userId } = req.body;

    //! 1. Проверка валидности ID вишлиста
    // Проверяем, что переданный ID вишлиста корректен (например, это число). Это позволяет избежать некорректных запросов.
    if (!isValidId(id)) {
      return res
        .status(400) // Возвращаем HTTP-код 400 (Bad Request), если ID не является валидным
        .json(
          formatResponse(
            400,
            'Невалидный ID вишлиста.', // Сообщение для клиента
            null,
            'Невалидный ID вишлиста.' // Технические данные для логов
          )
        );
    }

    //! 2. Проверка валидности ID пользователя
    // Проверяем, что переданный ID приглашаемого пользователя также является корректным
    if (!isValidId(userId)) {
      return res
        .status(400) // Если ID невалидный, отдаем клиенту ошибку 400
        .json(
          formatResponse(
            400,
            'Невалидный ID приглашаемого пользователя.',
            null,
            'Невалидный ID приглашаемого пользователя.'
          )
        );
    }

    try {
      //* 3. Получение вишлиста
      // Запрашиваем вишлист по ID из базы данных через сервис `WishlistService`
      const wishlistToUpdate = await WishlistService.getById(+id);

      //! 4. Проверяем, является ли текущий пользователь владельцем вишлиста
      // Если текущий пользователь не совпадает с владельцем (не имеет прав), то отказываем в доступе
      if (wishlistToUpdate.ownerId !== user.id) {
        return res.status(400).json(
          formatResponse(
            400,
            `Нет прав на приглашение пользователей в этот вишлист.`, // Сообщение для клиента
            null,
            `Нет прав на приглашение пользователей в этот вишлист.` // Техническая информация
          )
        );
      }

      //* 5. Проверка существования приглашаемого пользователя
      // Проверяем, существует ли в системе пользователь с переданным ID
      const invitedUser = await UserService.getById(userId);

      //! Если пользователь не найден
      if (!invitedUser) {
        return res
          .status(404) // Возвращаем ошибку 404, если пользователь не существует
          .json(
            formatResponse(
              404,
              `Приглашаемый пользователь не найден.`,
              null,
              `Приглашаемый пользователь не найден.`
            )
          );
      }

      //? 6. Обновление вишлиста со стороны сервиса
      // Передаем ID пользователя и ID вишлиста в метод сервиса `inviteUser`
      const updatedWishlist = await WishlistService.inviteUser({
        userId, // ID пользователя, который будет добавлен в вишлист
        wishlistId: id,
      });

      //! 7. Проверка успешности обновления
      // Если вишлист не найден или не удалось обновить, возвращаем ошибку
      if (!updatedWishlist) {
        return res
          .status(404)
          .json(
            formatResponse(
              404,
              `Вишлист не найден.`,
              null,
              `Вишлист не найден.`
            )
          );
      }

      //* 8. Успешный кейс
      // Если добавление прошло успешно, отправляем ответ с кодом 201 (Created)
      res.status(201).json(
        formatResponse(
          201, // HTTP-код успешного создания ресурса
          `Пользователь успешно приглашен в вишлист.`, // Уведомление об успехе
          updatedWishlist // Возвращаем обновленные данные о вишлисте
        )
      );
    } catch ({ message }) {
      //! 9. Обработка ошибок
      // Логируем сообщение об ошибке на сервере для диагностики
      console.error(message);
      // Возвращаем клиенту ошибку 500 (Internal Server Error)
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }

  //-- Метод для удаления (выгналения) пользователя из конкретного вишлиста
  static async kickOutUserFromWishlist(req, res) {
    // Извлекаем ID вишлиста из параметров URL
    const { id } = req.params;
    // Получаем данные текущего авторизованного пользователя из res.locals
    const { user } = res.locals;
    // ID пользователя, которого требуется удалить, передается в теле запроса
    const { userId } = req.body;

    //! 1. Проверяем валидность ID вишлиста
    // Убедимся, что переданный ID вишлиста является корректным (например, числом),
    // чтобы избежать ошибок на этапе поиска данных.
    if (!isValidId(id)) {
      return res
        .status(400) // Если ID вишлиста некорректен (например, это строка вместо числа), возвращаем ошибку 400
        .json(
          formatResponse(
            400,
            'Невалидный ID вишлиста.', // Сообщение для клиента
            null,
            'Невалидный ID вишлиста.' // Дополнительная информация для логов
          )
        );
    }

    //! 2. Проверяем валидность ID пользователя
    // Проверяем, корректен ли переданный ID пользователя (например, это тоже должно быть числом).
    if (!isValidId(userId)) {
      return res
        .status(400) // Если ID пользователя некорректен, возвращаем клиенту сообщение об ошибке
        .json(
          formatResponse(
            400,
            'Невалидный ID приглашаемого пользователя.',
            null,
            'Невалидный ID приглашаемого пользователя.'
          )
        );
    }

    try {
      //* 3. Извлекаем вишлист из базы данных
      // Пользуемся методом `getById` из WishlistService, чтобы найти вишлист с указанным ID.
      const wishlistToUpdate = await WishlistService.getById(+id);

      //! 4. Проверяем, что текущий пользователь является владельцем вишлиста
      // Ограничение прав: если текущий пользователь не является владельцем вишлиста,
      // он не имеет права удалять пользователей. Если пользователь не совпадает, возвращаем ошибку.
      if (wishlistToUpdate.ownerId !== user.id) {
        return res
          .status(400) // Возвращаем HTTP-статус 400, так как это ошибка прав доступа
          .json(
            formatResponse(
              400,
              `Нет прав на удаление пользователя из вишлиста.`, // Сообщение для клиента
              null,
              `Нет прав на удаление пользователя из вишлиста.` // Дополнительная информация для логов
            )
          );
      }

      //* 5. Проверяем существование пользователя, которого собираемся удалить
      // Используем метод `getById` сервиса UserService, чтобы проверить, существует ли пользователь с указанным ID.
      const deletedUser = await UserService.getById(userId);

      //! Если пользователь не найден
      if (!deletedUser) {
        return res
          .status(404) // Если пользователь не найден, возвращаем HTTP-статус 404
          .json(
            formatResponse(
              404,
              `Пользователь не найден.`, // Сообщение для клиента
              null,
              `Пользователь не найден.` // Дополнительные данные для логов
            )
          );
      }

      //? 6. Удаление пользователя из вишлиста
      // С помощью метода `kickOutUser` передаем userId и wishlistId. Этот метод отвечает
      // за удаление пользователя из списка участников вишлиста.
      const updatedWishlist = await WishlistService.kickOutUser({
        userId, // ID пользователя для удаления
        wishlistId: id, // ID вишлиста, из которого необходимо удалить пользователя
      });

      //! 7. Проверяем успешность удаления
      // Если вишлист не был обновлен (например, такой ресурс не существует), возвращаем ошибку.
      if (!updatedWishlist) {
        return res
          .status(404) // Возвращаем код 404, так как ресурс (вишлист) не найден
          .json(
            formatResponse(
              404,
              `Вишлист не найден.`, // Сообщение для клиента
              null,
              `Вишлист не найден.` // Логи
            )
          );
      }

      //* 8. Успешный случай: пользователь удален
      // Отправляем HTTP-статус 200 и сообщение о том, что пользователь успешно удален из вишлиста
      res.status(200).json(
        formatResponse(
          200, // HTTP статус "ОК"
          `Пользователь успешно удален из вишлиста.`, // Ошибка для клиента
          updatedWishlist // Отправляем обновленные данные о вишлисте
        )
      );
    } catch ({ message }) {
      //! 9. Обработка непредвиденных ошибок
      // Если возникает ошибка на сервере, логируем сообщение для диагностики
      console.error(message);
      // Возвращаем клиенту внутреннюю ошибку сервера с HTTP-кодом 500
      res
        .status(500)
        .json(formatResponse(500, 'Внутренняя ошибка сервера', null, message));
    }
  }
}

module.exports = WishlistController;
