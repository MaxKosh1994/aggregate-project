// Импортируем необходимые константы (поля для работы с комментариями и пользователями),
// чтобы использовать их при выборке данных из базы.
const { COMMENT_FIELDS, USER_FIELDS } = require('../consts/modelsFields');

// Импортируем модели `Comment` и `User` для взаимодействия с базой данных.
// Эти модели описывают, как представляются записи в таблицах базы данных.
const { Comment, User } = require('../db/models');

// Создаём класс `CommentService`, который содержит логику для работы с комментариями.
// Все его методы статические, поэтому их можно вызывать без создания экземпляра класса.
class CommentService {
  //* Метод для получения комментария по ID.
  // Этот метод позволяет найти комментарий, используя его уникальный идентификатор (id).
  // Он также включает данные об авторе комментария из модели `User`.
  static async getById(id) {
    return await Comment.findOne({
      // Ищем запись, где поле id совпадает с переданным значением.
      where: { id },
      // Указываем, какие именно поля из модели `Comment` нужно выбрать.
      attributes: COMMENT_FIELDS,
      // Указываем, что нужно добавить информацию об авторе (user), который создал комментарий.
      include: {
        model: User, // Подключаем модель `User` для связи.
        attributes: USER_FIELDS, // Поля, которые нужно получить из модели `User`.
        as: 'author', // Указываем псевдоним связи для упрощённого доступа к данным.
      },
    });
  }

  //* Метод для создания нового комментария.
  // Этот метод принимает объект данных (data) и создаёт новую запись в таблице `Comment`.
  // После создания комментария, он возвращает его с полной информацией, включая автора.
  static async create(data) {
    // Используем метод `Comment.create` для добавления нового комментария в базу данных.
    const newComment = await Comment.create(data);
    // После создания комментария получаем его полную информацию (связь с автором включена).
    return await this.getById(newComment.id);
  }

  //* Метод для обновления комментария.
  // Ищет комментарий по ID, проверяет наличие переданных данных для обновления и сохраняет изменения.
  static async update(id, data) {
    // Получаем текущую запись комментария из базы данных по его id.
    const comment = await this.getById(id);

    // Если комментарий найден, проверяем, что именно нужно обновить.
    if (comment) {
      // Если передан новый текст (поле `text`), обновляем текст комментария.
      if (data.text) {
        comment.title = data.text; // Обратите внимание: здесь, вероятно, ошибка — должно быть `comment.text = data.text`.
      }

      // Сохраняем изменения в базе данных после обновления полей.
      await comment.save();
    }

    // Возвращаем обновлённый комментарий либо `null`, если комментарий не найден.
    return comment;
  }

  //* Метод для удаления комментария.
  // По переданному ID метод сначала пытается найти комментарий. Если он существует, удаляет его из базы данных.
  static async delete(id) {
    // Сначала ищем комментарий по его ID.
    const comment = await this.getById(id);
    // Если комментарий найден, удаляем его, вызывая метод `destroy`.
    if (comment) {
      await comment.destroy();
    }
    // Возвращаем удалённый комментарий или `null`, если его не нашлось.
    return comment;
  }
}

// Экспортируем наш `CommentService`, чтобы он мог быть использован в других модулях.
// Например, в контроллерах, которые обрабатывают запросы клиента.
module.exports = CommentService;
